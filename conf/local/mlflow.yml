server:
  mlflow_tracking_uri: mlflow_runs # if null, will use mlflow.get_tracking_uri() as a default
  # mlflow_registry_uri: null # if null, mlflow_tracking_uri will be used as mlflow default
  # credentials: null  # must be a valid key in credentials.yml which refers to a dict of sensitive mlflow environment variables (password, tokens...). See top of the file.
  # request_header_provider: # this is only useful to deal with expiring token, see https://github.com/Galileo-Galilei/kedro-mlflow/issues/357
  #   type: null # The path to a class : my_project.pipelines.module.MyClass. Should inherit from https://github.com/mlflow/mlflow/blob/master/mlflow/tracking/request_header/abstract_request_header_provider.py#L4
  #   pass_context: False # should the class be instantiated with "kedro_context" argument?
  #   init_kwargs: {} # any kwargs to pass to the class when it is instantiated

tracking:
  # You can specify a list of pipeline names for which tracking will be disabled
  # Running "kedro run --pipeline=<pipeline_name>" will not log parameters
  # in a new mlflow run

  # disable_tracking:
  #   pipelines: []

  # experiment:
  #   name: {{ python_package }}
  #   restore_if_deleted: True  # if the experiment`name` was previously deleted experiment, should we restore it?

  # run:
  #   id: null # if `id` is None, a new run will be created
  #   name: null # if `name` is None, pipeline name will be used for the run name. You can use "${km.random_name:}" to generate a random name (mlflow's default)
  #   nested: True  # if `nested` is False, you won't be able to launch sub-runs inside your nodes
  params:
    # dict_params:
      # flatten: False  # if True, parameter which are dictionary will be splitted in multiple parameters when logged in mlflow, one for each key.
      # recursive: True  # Should the dictionary flattening be applied recursively (i.e for nested dictionaries)? Not use if `flatten_dict_params` is False.
      # sep: "." # In case of recursive flattening, what separator should be used between the keys? E.g. {hyperaparam1: {p1:1, p2:2}} will be logged as hyperaparam1.p1 and hyperaparam1.p2 in mlflow.
    long_params_strategy: tag # One of ["fail", "tag", "truncate" ] If a parameter is above mlflow limit (currently 250), what should kedro-mlflow do? -> fail, set as a tag instead of a parameter, or truncate it to its 250 first letters?